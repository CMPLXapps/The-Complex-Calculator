class Retype:
	def __init__(self, *args, **kwargs):
		self.Value = 0
	def __call__(self, *args, **kwargs):
		pass
	def __repr__(self, *args, **kwargs):
		return str(self.Value)
	#String Methods
	def __len__(self, *args, **kwargs):
		return len(str(self.Value))
	def __unicode__(self, *args, **kwargs):
		return unicode(str(self.Value))
	def __hash__(self, *args, **kwargs):
		return hash(str(self.Value))
	#Type Conversions
	def __str__(self, *args, **kwargs):
		return str(self.Value)
	def __float__(self, *args, **kwargs):
		return float(self.Value)
	def __int__(self, *args, **kwargs):
		return int(self.Value)
	def __nonzero__(self, *args, **kwargs):
		return bool(self.Value)
	def __complex__(self, *args, **kwargs):
		return complex(self.Value)
	def __oct__(self, *args, **kwargs):
		return oct(self.Value)
	def __hex__(self, *args, **kwargs):
		return hex(self.Value)
	def __index__(self, *args, **kwargs):
		pass
	#Augmentation
	def __pos__(self, *args, **kwargs):
		return +self.Value
	def __neg__(self, *args, **kwargs):
		return -self.Value
	def __abs__(self, *args, **kwargs):
		return abs(self.Value)
	def __invert__(self, *args, **kwargs):
		return ~self.Value
	def __round__(self, n=0, *args, **kwargs):
		return round(self.Value, n)
	def __iadd__(self, other, *args, **kwargs):
		self.Value += other
	def __isub__(self, other, *args, **kwargs):
		self.Value -= other
	def __imul__(self, other, *args, **kwargs):
		self.Value *= other
	def __ifloordiv__(self, other, *args, **kwargs):
		self.Value //= other
	def __idiv__(self, other, *args, **kwargs):
		self.Value /= other
	def __itruediv__(self, other, *args, **kwargs):
		pass
	def __imod__(self, other, *args, **kwargs):
		self.Value %= other
	def __ipow__(self, other, *args, **kwargs):
		self.Value **= other
	def __ilshift__(self, other, *args, **kwargs):
		self.Value <<= other
	def __irshift__(self, other, *args, **kwargs):
		self.Value >>= other
	def __iand__(self, other, *args, **kwargs):
		self.Value &= other
	def __ior__(self, other, *args, **kwargs):
		self.Value |= other
	def __ixor__(self, other, *args, **kwargs):
		self.Value ^= other
	#Operator Methods
	def __add__(self, other, *args, **kwargs):
		return self.Value + other
	def __sub__(self, other, *args, **kwargs):
		return self.Value - other
	def __mul__(self, other, *args, **kwargs):
		return self.Value * other
	def __floordiv__(self, other, *args, **kwargs):
		return self.Value // other
	def __truediv__(self, other, *args, **kwargs):
		return self.Value / other
	def __mod__(self, other, *args, **kwargs):
		return self.Value % other
	def __pow__(self, other, *args, **kwargs):
		return self.Value ** other
	#Comparison
	def __lt__(self, other, *args, **kwargs):
		return self.Value < other
	def __le__(self, other, *args, **kwargs):
		return self.Value <= other
	def __eq__(self, other, *args, **kwargs):
		return self.Value == other
	def __ne__(self, other, *args, **kwargs):
		return self.Value != other
	def __ge__(self, other, *args, **kwargs):
		return self.Value >= other